#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Quick rewrite of podget in python

"""

from urllib import urlopen
from xml.etree import cElementTree as etree
import os
import sys
import time

HAS_PROGRESSBAR = True

try:
    import feedparser
except ImportError:
    print "Error, could not find feedparser module"
    sys.exit(1)

try:
    from progressbar import ProgressBar
    from progressbar import Percentage
    from progressbar import FileTransferSpeed
    from progressbar import ETA
    from progressbar import Bar
except ImportError:
    HAS_PROGRESSBAR = False

OUTPUT = "~/Podcasts"

OUTPUT = os.path.expanduser(OUTPUT)


class PodcastError(Exception):
    """
    Custom exception.

    """
    def __init__(self, message):
        self.message = message

    def __str__(self):
        return str(self.message)



class PodcastDownloader:
    """
    Initialized with a nickname and a url.

    Retrieve the rss file from the URL, and for each entry in the feed,
    download it, then save file in
    OUTPUT/nickname/date.mp3

    """
    def __init__(self, url, nick_name, verbose=False):
        self.url       = url
        self.nick_name = nick_name
        self.entries   = []
        self.verbose   = verbose


    def download(self):
        """
        Main method.

        """
        try:
            self.retrieve_info()
            self.retrieve_content()
        except PodcastError, err:
            print err


    def retrieve_info(self):
        """
        Retrieve the XML Rss file, and updates the podcast object

        """
        feed = feedparser.parse(self.url)
        self.entries = feed.entries


    def retrieve_content(self):
        """
        Now that we got the information (the URL and the date),
        get the file and save it.

        """
        for entry in self.entries:
            output_path = os.path.join(OUTPUT, self.nick_name)
            url  = entry.enclosures[0].href
            date = entry.updated_parsed

            # Get filename extension from URL:
            file_extension = url.split(".")[-1]
            date_str  = time.strftime("%Y-%m-%d", date)
            file_name = date_str + "." + file_extension
            file_path = os.path.join(output_path, file_name)

            if not os.path.exists(output_path):
                os.makedirs(output_path)

            if os.path.exists(file_path):
                print file_path, "already exists, skipping"
                continue

            print "Downloading ", url
            print "Saving to", file_path
            try:
                source = urlopen(url)
            except IOError, err:
                print "Failed to download", url
                print "Error was", err
                continue

            size = int(source.headers.get("content-length"))
            buf_size = 16 * 1024 # (same length as in shtutil.copyfileobj)
            if self.verbose:
                pbar = ProgressBar(
                  widgets = [
                    Percentage()                          ,
                    " "                                   ,
                    Bar(marker='#', left='[', right=']' ) ,
                    " - "                                 ,
                    FileTransferSpeed()                   ,
                    " | "                                 ,
                    ETA() ]                               ,
                  maxval = size )

            output = open(file_path, "wb")
            done    = 0
            content = source.read(buf_size)

            while content:
                done += buf_size
                if done > size:
                    done = size

                if self.verbose:
                    pbar.update(done)

                output.write(content)
                content = source.read(buf_size)

            output.close()
            print "Done"



def _get_config():
    """
    Read .config/pypodget/serverlist.

    Returns a list of tuples (<urls>, <nicknames>)

    """
    res = []
    config_path = os.path.expanduser("~/.config/pypodget/serverlist")
    config = open(config_path, "r")
    lines = config.readlines()
    config.close()
    for line in lines:
        if line.startswith("#"):
            continue
        if len(line.split()) != 2:
            continue
        [url, nickname] = line.split()
        res.append((url, nickname))
    return res



def main():
    """
    Manages options when called from command-line
    """
    serverlist = _get_config()
    verbose = False
    if len(sys.argv) > 1:
        if "--verbose" in sys.argv[1]:
            if not HAS_PROGRESSBAR:
                print "--verbose needs python-progressbar"
                exit(2)
            verbose = True

    for (url, nick_name) in serverlist:
        podcast_downloader = PodcastDownloader(url, nick_name, verbose)
        podcast_downloader.download()


if __name__ == "__main__" :
    main()

